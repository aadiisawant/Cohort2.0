/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const file = require('fs');
  const path = require('path')
  const { v4: uuidv4 } = require('uuid');

  const app = express();
  let ID = 1;
  app.use(bodyParser.json());
  
  const todosStore = path.join(__dirname,'todos.json')

  //Array Operations Functions
  function findIndex(data, ID){
    let index=-1;
    for(let i=0;i<data.length;i++){
      if(data[i].id == ID){
        index=i;
      }
    }
    return index;
  }
  function updateTodos(arr, data, id){
    for(let i=0;i<arr.length;i++){
      if(arr[i].id == id){
        arr[i] = data;
        break;
      }
    }
    return arr;
  }

  //endpoints
  app.get('/todos', (req, res)=>{
      file.readFile(todosStore,"utf-8",(err,data)=>{
        if(err) throw err;
        res.json(JSON.parse(data))
      })
  });

  app.get('/todos/:id', (req, res)=>{
    const id = req.params.id;
    file.readFile(todosStore,"utf-8",(err,data)=>{
      if(err) throw err;
      const dataArr = JSON.parse(data);
      const index = findIndex(dataArr, id);
      if(index === -1){
        res.status(404).send('File Not Found');
      }else{
      res.json(dataArr[index])
      }
    })
  });

  app.post('/todos', (req, res)=>{
    const todoForm = req.body;
    todoForm.id = ID;
    ID++;
    console.log(todoForm);
      file.readFile(todosStore,"utf-8",(err,data)=>{
        if(err) throw err;
        const todoArr = JSON.parse(data)
        todoArr.push(todoForm);
        file.writeFile(todosStore, JSON.stringify(todoArr), (err)=>{
          if(err) throw err;
          res.status(201).json(todoForm);
        })
      });
  });

  
  app.put('/todos/:id', (req, res)=>{
    const updateTodo= req.body;
    const id = req.params.id;
    file.readFile(todosStore,"utf-8",(err,data)=>{
      if(err) throw err;
      data = JSON.parse(data)
      const index = findIndex(data, id);
      if(index === -1){
        res.status(404).send('File Not Found');
      }else{
        const updatedTodo = updateTodos(data, updateTodo, id )
      file.writeFile(todosStore, JSON.stringify(updatedTodo), (err)=>{
        if(err) throw err;
        res.status(200).json(`Update is done.`)
      })
      }
    });
  });

  app.delete('/todos/:id', (req, res)=>{
    const id = req.params.id;
    file.readFile(todosStore,"utf-8",(err,data)=>{
      if(err) throw err;
      data = JSON.parse(data)
      const index = findIndex(data, id);
      if(index == -1){
        res.status(404).send('File Not Found');
      }else{
        data.splice(index,1);
        file.writeFile(todosStore, JSON.stringify(data), (err)=>{
          if(err) throw err;
          res.status(200).send()
        })
      }
      
    });
  });


  app.all('*', (req,res)=>{
    res.status(404).send('Route not found');
  })


  app.listen(3000 ,() => console.log("Server Started..."))

  module.exports = app;